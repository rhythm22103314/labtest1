{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f00982bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 0 to Show Catalogue\n",
      "Enter 1 to rent a movie\n",
      "Enter 2 to return a movie\n",
      "Enter 3 to generate report1\n",
      "Enter you nameRhythm\n",
      "Enter movie nameHOLIDAY\n",
      "Movie HOLIDAY rented to Rhythm.\n",
      "Enter 0 to Show Catalogue\n",
      "Enter 1 to rent a movie\n",
      "Enter 2 to return a movie\n",
      "Enter 3 to generate report1\n",
      "Enter you nameSHIVAM\n",
      "Enter movie nameDDLJ\n",
      "Customer SHIVAM does not exist.\n",
      "Enter 0 to Show Catalogue\n",
      "Enter 1 to rent a movie\n",
      "Enter 2 to return a movie\n",
      "Enter 3 to generate report2\n",
      "Enter you nameRhythm\n",
      "Enter movie nameHOLIDAY\n",
      "Movie HOLIDAY returned by Rhythm.\n",
      "Enter 0 to Show Catalogue\n",
      "Enter 1 to rent a movie\n",
      "Enter 2 to return a movie\n",
      "Enter 3 to generate report3\n",
      "\n",
      "Rental Report:\n",
      "Movies:\n",
      "  DDLJ - Available: 5, Rented by: \n",
      "  HOLIDAY - Available: 3, Rented by: \n",
      "  TIGER - Available: 0, Rented by: \n",
      "\n",
      "Customers:\n",
      "  Rhythm - Rented Movies: \n",
      "  Rahul - Rented Movies: \n",
      "  Shivam - Rented Movies: \n",
      "\n",
      "Transactions:\n",
      "  Rhythm rented HOLIDAY\n",
      "  Rhythm returned HOLIDAY\n"
     ]
    }
   ],
   "source": [
    "movies = {\n",
    "    'DDLJ': {'available': 5, 'rented_by': []},\n",
    "    'HOLIDAY': {'available': 3, 'rented_by': []},\n",
    "    'TIGER': {'available': 0, 'rented_by': []}\n",
    "}\n",
    "\n",
    "customers = {\n",
    "    'Rhythm': {'rented_movies': []},\n",
    "    'Rahul': {'rented_movies': []},\n",
    "    'Shivam': {'rented_movies': []}\n",
    "}\n",
    "\n",
    "transactions = []\n",
    "\n",
    "def rent_movie(customer_name, movie_title):\n",
    "    if customer_name not in customers:\n",
    "        print(f\"Customer {customer_name} does not exist.\")\n",
    "        return\n",
    "    if movie_title not in movies:\n",
    "        print(f\"Movie {movie_title} does not exist.\")\n",
    "        return\n",
    "    if movies[movie_title]['available'] <= 0:\n",
    "        print(f\"Movie {movie_title} is currently out of stock.\")\n",
    "        return\n",
    "    if movie_title in customers[customer_name]['rented_movies']:\n",
    "        print(f\"Customer {customer_name} has already rented {movie_title}.\")\n",
    "        return\n",
    "    \n",
    "    movies[movie_title]['available'] -= 1\n",
    "    movies[movie_title]['rented_by'].append(customer_name)\n",
    "    customers[customer_name]['rented_movies'].append(movie_title)\n",
    "    transactions.append({'customer': customer_name, 'movie': movie_title, 'action': 'rented'})\n",
    "    print(f\"Movie {movie_title} rented to {customer_name}.\")\n",
    "\n",
    "def return_movie(customer_name, movie_title):\n",
    "    if customer_name not in customers:\n",
    "        print(f\"Customer {customer_name} does not exist.\")\n",
    "        return\n",
    "    if movie_title not in movies:\n",
    "        print(f\"Movie {movie_title} does not exist.\")\n",
    "        return\n",
    "    if movie_title not in customers[customer_name]['rented_movies']:2\n",
    "        print(f\"Customer {customer_name} has not rented {movie_title}.\")\n",
    "        return\n",
    "    \n",
    "    movies[movie_title]['available'] += 1\n",
    "    movies[movie_title]['rented_by'].remove(customer_name)\n",
    "    customers[customer_name]['rented_movies'].remove(movie_title)\n",
    "    transactions.append({'customer': customer_name, 'movie': movie_title, 'action': 'returned'})\n",
    "    print(f\"Movie {movie_title} returned by {customer_name}.\")\n",
    "\n",
    "def generate_rental_report():\n",
    "    print(\"\\nRental Report:\")\n",
    "    print(\"Movies:\")\n",
    "    for movie, details in movies.items():\n",
    "        print(f\"  {movie} - Available: {details['available']}, Rented by: {', '.join(details['rented_by'])}\")\n",
    "    \n",
    "    print(\"\\nCustomers:\")\n",
    "    for customer, details in customers.items():\n",
    "        print(f\"  {customer} - Rented Movies: {', '.join(details['rented_movies'])}\")\n",
    "    \n",
    "    print(\"\\nTransactions:\")\n",
    "    for transaction in transactions:\n",
    "        print(f\"  {transaction['customer']} {transaction['action']} {transaction['movie']}\")\n",
    "while(True):\n",
    "    c=int(input(\"Enter 0 to Show Catalogue\\nEnter 1 to rent a movie\\nEnter 2 to return a movie\\nEnter 3 to generate report\"))\n",
    "    if(c==0):\n",
    "        print(movies)\n",
    "    if(c==1):\n",
    "        cname=input(\"Enter you name\")\n",
    "        mname=input(\"Enter movie name\")\n",
    "        rent_movie(cname,mname)\n",
    "    if(c==2):\n",
    "        c1name=input(\"Enter you name\")\n",
    "        m1name=input(\"Enter movie name\")\n",
    "        return_movie(c1name,m1name)\n",
    "    if(c==3):\n",
    "        generate_rental_report()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14569834",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a18f0437",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdf1c26e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5632fda",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
